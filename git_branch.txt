在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：
你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！
不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：
假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：
所以Git合并分支也很快！就改改指针，工作区内容也不变！
合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支.

实战：
显示分区：git branch
创建dev分区,切换到该分区：git checkout -b dev。 -b： 创建并切换
D:\app\docs\git\doc\learn-git>git checkout -b dev
Switched to a new branch 'dev'

检验分区：git branch dev
D:\app\docs\git\doc\learn-git>git branch dev
fatal: A branch named 'dev' already exists.

切换分区：git checkout dev
D:\app\docs\git\doc\learn-
Switched to branch 'dev'

切换到master分区：git checkout master，合并dev分区：git merge dev
删除dev分区： git branch -d dev
Deleted branch dev (was 1afd233).

小结

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


git status  git status
git log   see last commit info

